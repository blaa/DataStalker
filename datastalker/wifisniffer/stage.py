# (C) 2015 - 2019 by Tomasz bla Fortuna
# License: MIT

from datastalker.pipeline import (
    SourceStage,
    Pipeline,
    Message
)
from datastalker.wifisniffer import Sniffer, Hopper


class SnifferMessage(Message):
    """
    Message generated by WifiSniffer source stage.

    TODO: Manage schema for elasticsearch here.
    """
    def __init__(self, packet):
        self.pkt = packet

    # Compatibility interface
    def __getitem__(self, key):
        return self.pkt[key]

    def __setitem__(self, key, value):
        self.pkt[key] = value

    def __delitem__(self, key):
        del self.pkt[key]

    def __contains__(self, key):
        return key in self.pkt

    def keys(self):
        return self.pkt.keys()


@Pipeline.register_stage('wifi_sniffer')
class WifiSnifferStage(SourceStage):
    "Connect sniffer code to pipeline as a sourcestage"

    def __init__(self, sniffer):
        self.sniffer = sniffer

    def run(self):
        for packets in self.sniffer.run():
            messages = [
                SnifferMessage(packet)
                for packet in packets
            ]
            yield messages

    @classmethod
    def from_config(cls, config, stats):
        "Create sniffer with injected hopper from YAML configuration"

        name = config.get('name', 'default')
        interface = config.get('interface')
        related_interface = config.get('related_interface')

        hopper_cfg = config.get('hopper', None)

        if hopper_cfg is not None:
            channels = hopper_cfg.get('channels', None)
            max_karma = hopper_cfg.get('max_karma', None)
            hop_tries = hopper_cfg.get('hop_tries', 10)

            # Create hopper
            hopper = Hopper(interface, related_interface, stats,
                            hop_tries=hop_tries)
            hopper.configure(channels, max_karma)
        else:
            hopper = None

        # Create sniffer, inject hopper
        sniffer = Sniffer(interface,
                          related_interface,
                          hopper,
                          stats,
                          sniffer_name=name)

        stage = WifiSnifferStage(sniffer)
        return stage
